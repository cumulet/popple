[gd_resource type="Shader" format=3 uid="uid://bqd2nkcxew0gk"]

[resource]
code = "shader_type spatial;

uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;
uniform sampler2D noiseTexture;
uniform sampler2D normaTexture;
uniform vec4 albedo_color :source_color;
uniform float height_multiplier = 1;
uniform float noise_sample_size = 1;
uniform float noise_speed = 0.01;
uniform float refraction_strength = 0.01;

varying float height;

float fresnel(vec3 normal, mat4 camera_matrix){
	vec3 view_direction_world = (camera_matrix * vec4(0.0,0.0,1.0,0.0)).xyz;
	vec3 normal_world = (camera_matrix * vec4(normal,0.0)).xyz;
	
	float d = dot(view_direction_world, normal_world);
	d = abs(d);
	d = clamp(d, 0.0, 1.0);
	
	return 1.0 - d;
}

void vertex() {
	height = texture(noiseTexture, VERTEX.xy *noise_sample_size + vec2(TIME) * noise_speed).r;
	VERTEX += NORMAL * height * height_multiplier;
}

void fragment() {
	
	
	vec2 offset = SCREEN_UV;
	float xNorm = NORMAL.x;
	float yNorm = NORMAL.y;
	offset.x += NORMAL.z * xNorm * refraction_strength * 0.01;
	offset.y += NORMAL.z * yNorm * refraction_strength * -0.01;

	ROUGHNESS = mix(0.1, 0.5, 1.0 - height);
	SPECULAR = height;
	ALPHA = fresnel(NORMAL, INV_VIEW_MATRIX);
	ALBEDO = texture(SCREEN_TEXTURE, offset).xyz*0.5 + albedo_color.rgb;
}

"
